========================================================================================================================
=																													   =
=				  					Project - Temperature Controlled PWM Fans										   =
=																													   =
========================================================================================================================

* Author:	Weilhartner Stefan
* Email: 	funkmaster.whylee@gmail.com
* Created:	29.08.2023

------------------------------------------------------------------------------------------------------------------------

	This project is open source! You can do with it what you want as long as you refer to
	the original Author (Weilhartner Stefan)
	
													PLEASE DONATE !!!

* Proposal for donation:
  Of course a donation is not necessary and purely optional / up to you.
  But if you find this project valuable and it supports you in any way or you want to support me:
  Please donate something. Ask yourself how much you want to donate for this project, how much is it worth for you,
  how much you want to give back or how much you want to sponsor this project in any way, if you just like it.
  I don't have any donation page yet, but if you write an email to me with the subject
  "Donation - Commotari - Project Temperature Controlled PWM Fan", i try to respond.
  Maybe you also have an idea what kind of sponsorship system/webpage you would suggest
  (maybe patreon etc. which i did not have the time to look into yet)

* Additional needs:
  If you need additional functions that do not take too much time to implement you can try to contact me about it.
  If it is a function that many people could need, then I might think about it and if I have to much time on my hand
  (which is not very likely), then I might do that for free.
  If you need an extention/change/function for your individual needs, that might be possible, if you already have
  donated an appropriate amount or if you want to make a contract (of course this depends on my motivation and spare
  time, which is not much because i already have a full time job which i am happy with).

------------------------------------------------------------------------------------------------------------------------
* Project goal:

- should control a number of fans depending on the temperature
- should be easy to solder for everyone
  (maybe two versions, one version with DIP chips, easy to solder and one highly integrated version with smd components)
- external 12V supply

------------------------------------------------------------------------------------------------------------------------
* Proposed software implementation steps and functionalities:

- V0.05: solder a small pcb that only contains a 'passive' version for a quick fix:
		* the power supply barrel connector for the 12V power supply
		* add the electrolytic caps, ceramic cap and voltage regulator and again a ceramic cap and elektrolytic cap.
		* and 3 molex KK fan connectors with spaces and soldering possibilities to add all other chips later (mcu, rtc, temp),...
		* connect the PWM pins from the fan connectors to high (5V ????) at first.
		==> ready to use at 100% without any controlling as a quick fix.
		 

- V0.1: switch on three PWMs with 25kHz and 50% duty cycle

- V0.2: serial interface together with the serial-usb converter chip

- V0.3: bootup PWM duty cycle configurable by command line over serial interface and eeprom configuration

- V0.4: read out temperature sensors (internal, analog, i2C)

- V0.5: configure temperature sensors with PWM formula

- V0.6: I2C RTC read/write, set clock/date at command line terminal

- V ???: rpm detection of fans, configuration of fans (not connected, on/off, pwm), fault detection if rpm too low
- V ???: flash programmable memory functions, either internal flash or external SPI or I2C 
- V ???: statistics regarding temperature recording, boot up time, brown out time in EEPROM?
- V ???: brown out detection 11V power supply level detection, switch off fans below 11V, Capacitor to write last power down time
- V ???: log which saves power on time, brown out time, pwm faults


========================================================================================================================

* 3 PWM controlled fans
* 3 rpm inputs
* 3 PWM outputs
* 1-2 temperature inputs
* serial debug interface
* programming interface

========================================================================================================================


1. Microcontroller:

	The selected Microcontroller that seems to be a good fit is the PIC18F16Q41 from Microchip
	Features:
	* DIP package available (PIC18F16Q41-I/P, 2,49€ at reichelt.de)
	* programmable with microchip tools or cheap alternatives
	* 5V compatible
	* fast enough
	* enough PWM outputs
	* enough flash, could be used for a section with log-files as well (???)
	* 
	
1.a PIC18F16Q41-I/P
    * Refer to Basic connection requirements in datasheet
	* nMCLR pin needs a basic pull-up netword according to the datasheet
	* PWM outputs:
		- PWM1S1P1_OUT: RA2
		- PWM2S1P1_OUT: RC0
		- PWM3S1P1_OUT: RC1
	* LEDs:
		maximum rating on I/O pin is 50mA, LEDs should only draw 10mA 
		- red led
			Quadrios, reichelt.de QUAD 2111O173, 3mm, 2500 mcd, 25°, 625nm
			If(typ) 20mA, Uf(typ) 2.0V
			resistor: R=(5V-2,0V)/0,01A = 3V/0,01A = 300 Ohm
		- red green
			Quadrios, reichelt.de QUAD 2111O176, 3mm, 8000 mcd, 25°, 520nm
			If(typ) 20mA, Uf(typ) 3.0V
			resistor: R=(5V-3,0V)/0,01A = 2V/0,01A = 200 Ohm
		==> green led might be too bright at 200Ohm
		==> both LED will get 330 Ohm resistor.
	* Serial interface: TODO
		- first simple interface is a 5V compatible serial2USB cable from FTDI connected to a 6-pin pin header
		- onboard serial2USB converter chip with a USB connector on board ==> todo in the future
	* I2C interface: TODO
		
		
	
	
2. Fan(s)

	Software configuration: Low when off, Duty Cycle from 1% to 100%, or 20% to 100%
	defends on the fan.

2.1. 4-wire Fans:
	
	Cheap Fan from Pollin:
	https://www.pollin.at/p/lc-power-cpu-luefter-lc-cf-80-80-mm-4-pin-pwm-704006	
	
2.2. Fan Connectors - 
	MOLEX 22272041 Molex pin header - KK - 1x4	==> 0,35€ at reichelt.at
	
2.3. Fan Connectors - Connector - 4-Wire Pinout	
	http://www.pavouk.org/hw/fan/en_fan4wire.html
	1 - Black	GND
	2 - Yellow	12V
	3 - Green	Sense(tach)
	4 - Blue	Control (PWM)

2.4. Controlling:
	* PWM frequency: 25kHz (21kHz ... 28kHz allowed)
	* 100% high means Duty cycle 100% ==> pull-up 47k to TTL 5V high
	
	http://www.formfactors.org/developer/specs/4_Wire_PWM_Spec.pdf 4-Wire connection specification.
	
3. USB-Interface:
	* serial to USB converter MCP 2221-I/P  (DIP-14 case)	==> Reichelt 3.20€
	* Connector: USB 31 C from Fisher Elektronik (Reichelt.de ==> 4,5€

4. DC Connector:
	* PCB mounted Barrel Jack 5.5mm * 2.1mm for 12V
	CLIFF FCR681465P Built-in coupling Solder pins
	
	
5. Temperature Sensor:
	5.1. Analog LM35
		10mV per degree celcius.
		==> 25°C  ==> 0,25V
		==> 50°C  ==> 0,50V
		==> 150°C ==> 1,50V
		Example code can be found here:
		https://circuitdigest.com/microcontroller-projects/digital-thermometer-using-pic16f877a-lm35-temperature-sensor
		Three sensors. one on the pcb, two connected with a 3-pin molex KK connectors ???
	
	5.2. Digital - LM75
		* LM75 is cheaper than LM35 (Reichelt 1,80€ vs. 2,35@), availability is better
		* LM75 SMD communicates via I2C bus
		* MOLEX 22057045 Molex pin header, 90° — SPOX — 1x4-pin — connector
		* MOLEX 50375043 Molex crimp housing — SPOX — 1x4-pin — socket
		* Pinout:
			color coding from DIN47100
			1 - GND		-  white
			2 - 5V		-  brown
			3 - SDA		-  green
			4 - SDL		-  yellow

	5.3. Digital - Microchip MCP9808
		* MCP9808 is one of the cheapest digital sensors (Reichelt 1,75€ vs. 2,35@)
		* very good accuracy (typical +-0.25°C)
		* communicates via I2C bus
		* MOLEX 22057045 Molex pin header, 90° — SPOX — 1x4-pin — connector
		* MOLEX 50375043 Molex crimp housing — SPOX — 1x4-pin — socket
		* Pinout:
			1 - GND
			2 - 5V
			3 - SDA
			4 - SDL
			
6. Real time clock:
	* MCP7940N
	* communication via I2C
	* crystal: IQD LFXTAL014219 Quartz, 32.768 kHz, 6pF ==> Reichelt: 0,31€
	

7. Voltage regulator from 12V to 5V
	7.1. MCP16331
	
8. I2C Communication
	* We will try the 100kHz communication with 15kOhm pullup resistors on the SCL and SCA pin next to the
	  temperature sensor on the main board. on every additional external board with a temperature sensor,
	  we add another 15kOhm pull up resistor to SCA and SCL and at least one 100nF capacitor to have a
	  stable voltage supply and less reflection and to compensatore for the capacitance on the wire
	  between the main board and any additional sensor board. after having that, we can do some measurement
	  to check, if the signals are good.
	  modification:
	  * if the singals do not look that nice at 100kHz, then we need to lower the resistors to 10kOhm.
	  * if the signals look bad, we need to lower the resistors to 4,7kOhm and check again. this should
	    reduce the e-curve to a third of the time.
	  
	  * different proposal for testing without measurement device:
		* use 4.7kOhm resistors from the beginning
		* check, if it is working with 100kHz
	    * check, if it is working with 400kHz
		* check the signal later, when having a scope at hand.
	
11. Bluetooth vs. USB-interface
	At reichelt.de there was an ESP32-C3FH4 bluetooth/wifi module for less than 3€. (ESP32-C3-MINI-1)
	This is a solution that has simiar costs compared to the usb interface (chip + connector).
	Bluetooth might be an easy way to connect to a mobile device (android phone) to check temperature logs and
	adjust the configuration (for the lowest and highest temperature levels to control the fan speed).
	It would even be possible to send temperature logs to a website via a simple http client via a wifi connection.
	Even without controlling a fan this could also serve as a temperature surveillance device for other applications.
	
	  

10. PCB
	* the PCB should be designed with KiCAD
	* It should have a QRCODE or something similar on the PCB to point to the github page to get
	  all the documentation needed (if someone sees this and doesn't know what it is or what it does)
	  
	* theoretically there could be different versions: one with DIP packages and through hole components
	  and (maybe!!) later on a more integrated smaller version with SMD components on it.
	  
	  
	

